#include <stdio.h>
int main()
{
     int id;
     id = process_fork(3);
     //printf("Hello I am %d\n", id);
     if(id==0)
       {
            // parent process
            printf("Hello I am parent %d\n", id);
       } 
     else if(id==1)
       {
            // First Child
            //printf("Hello I am child %d\n", id);  
            execl("/usr/bin/who","who", (char*)0);
       }
     else if(id==2)
       {
            // Second Child 
            //printf("Hello I am child %d\n", id);
            execl("/bin/ls","ls","-l" ,(char*)0);     
       }
     else if(id==3)
       {
            // Third Child
            //printf("Hello I am child %d\n", id);
            execl("/bin/pwd","pwd", (char*)0);
       }
}
int process_fork(int n)
{
      int i;
   
      for(i=1;i<=n;i++)
      {
              if(fork()==0)  
                  return i;
              //else
              //return 0;
      }
      return 0;
}







4.2

#include<stdio.h>
#include<unistd.h>
main()
{
    int i=0,k=0;
    int pid[4],pidt;
    float a=4,b=5;
   for(i=0;i<4;i++)
   {
      k++; 
      pidt = fork();        
      if(pidt == 0)
           break;       
   }    
      if(pidt == 0)
           {    
                if(k==1)
                  {   sleep(20);
                      printf("Addition is :%f\n",a+b); 
                  }
                else if(k==2)
                  {   sleep(15);
                      printf("Multiplication is :%f\n",a*b);
                  }
                else if(k==3)
                  {   sleep(10);
                      printf("substraction is :%f\n",a-b);  
                  }  
                else if(k==4)
                  {   sleep(9);
                      printf("Divison is :%f\n",a/b);
                  } 
                else
                  {    printf("Invalid k\n");
                  }			            
           }
      else
           {
                wait(0);
                exit(1);
           }
 /* 
  if(pidt == 0)
  { 
      if(getpid()==pid[0])
          printf("The addition is :%f\n",a+b);
         
       else if(getpid==pid[1]) 
          printf("The substraction is: %f\n",a-b);

       else if(getpid == pid[2])   
          printf("The multiplication is %f\n:",a*b);

       else
          printf("The divison is %f",a/b);	
   }
   else
    {
             wait(0);
             exit(1); 
    }
   */
}



5.1
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define SIZE 100000

int A[SIZE], B[SIZE], sum[SIZE], diff[SIZE];

void* add(void* arg) {
    for (int i = 0; i < SIZE; i++) {
        sum[i] = A[i] + B[i];
    }
    pthread_exit(NULL);
}

void* subtract(void* arg) {
    for (int i = 0; i < SIZE; i++) {
        diff[i] = A[i] - B[i];
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t thread1, thread2;

    // Initialize arrays
    for (int i = 0; i < SIZE; i++) {
        A[i] = i;
        B[i] = SIZE - i;
    }

    pthread_create(&thread1, NULL, add, NULL);
    pthread_create(&thread2, NULL, subtract, NULL);

    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    // Print first 5 results for verification
    printf("Index\tA\tB\tSum\tDiff\n");
    for (int i = 0; i < 5; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", i, A[i], B[i], sum[i], diff[i]);
    }

    return 0;
}



5.2


#include <stdio.h>
#include <pthread.h>

#define MAX 10000000
pthread_mutex_t the_mutex;
pthread_cond_t  condc, condp;
int buffer[MAX] , count=0;
long k=0,j=0;
void *producer(void *ptr)
{
     
     while(1)
     {
         pthread_mutex_lock(&the_mutex);
         if(count == MAX) 
            {   
                printf("Buffer FULL on %d\n",count);         
                pthread_cond_wait(&condp, &the_mutex);
            }
         buffer[k]=k;  k++;   if(k==MAX+1) k=0;
	 count++;
                  
         if(count == 1)
              pthread_cond_signal(&condc);

         pthread_mutex_unlock(&the_mutex);
         
     }
     pthread_exit(0); 
}

void *consumer(void *ptr)
{
     int p;
     while(1)
     {
         pthread_mutex_lock(&the_mutex);

         if(count == 0)
	 {  
	       printf("BUffer is Empty on %d \n",count);    	
               pthread_cond_wait(&condc,&the_mutex);    
         }
         p = buffer[j];  j++;    if(j==MAX+1)  j=0;
         count--;
	 if(count == MAX-1)
              pthread_cond_signal(&condp);

         pthread_mutex_unlock(&the_mutex);
         
     }
     pthread_exit(0); 
}

int main(int argc, char **argv)
{
     pthread_t  pro, con;
     pthread_mutex_init(&the_mutex, 0);
     pthread_cond_init(&condc, 0);
     pthread_cond_init(&condp, 0);
     // pthread_create(&con,0,consumer,0);
     pthread_create(&pro,0,producer,0);
     pthread_create(&con,0,consumer,0);
     pthread_join (pro,0);
     pthread_join (con,0);
     printf("Count is :%d\n", count);
     pthread_cond_destroy(&condc);	
     pthread_cond_destroy(&condp);
     pthread_mutex_destroy(&the_mutex);

}



6.1

#include <stdio.h>
#include <sys/types.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <sys/ipc.h>
#include <unistd.h>
main()
{
    int sid,sid1;
    int *sidp;
    char *msg,hel1[5]="hello";
    sid = shmget(0x2,10,IPC_CREAT | 0666);
  //  sid1 = shmget(0x3,5,IPC_CREAT | 0666);
   // printf("%d",sid);
    msg = shmat(sid,0,0);  
    sidp  = shmat(sid,0,0);
//    *sidp = 99;
    strcpy(msg,hel1);
    strcpy(hel1,"NOTOK");
     *sidp = 99;    
     printf("%s\n",msg); 
     printf("%s\n",hel1);
     printf("%d\n",*sidp);     
}



6.2

#include <stdio.h>
#include <sys/types.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <sys/ipc.h>
#include <unistd.h>

main()
{
    int sid,j;
     double i;
    int *sidp;

    int semaid; 
    
    sid = shmget(0x2,10,IPC_CREAT | 0666);
    sidp  = shmat(sid,0,0);
    *sidp = 100;
    
    semaid= semget(0x5,1,IPC_CREAT | 0666); 
     semctl(semaid,0,SETVAL,0);
  for(j=0;j<15;j++)
  {   
    if((semctl(semaid,0,GETVAL,0)) == 0)
       { 
          semctl(semaid,0,SETVAL,1);

           for(i=0;i<10;i++)
             *sidp = *sidp + 1;  
           
           printf("%d\n",*sidp);
             
           semctl(semaid,0,SETVAL,0);  
      }  
      for(i=0;i<1000000000/3;i++) {   }
      
   }        
     
 
}







